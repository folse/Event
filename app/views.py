# -*- coding: utf-8 -*- import MySQLdbimport urllibfrom urllib import urlencodefrom flask import request, session, g, redirect, url_for, \     abort, render_template, flashfrom config import DB_HOSTfrom config import DATABASEfrom config import USERfrom config import PASSWDfrom app import appimport sysreload(sys)sys.setdefaultencoding('utf-8')# define database connectiondef connect_db():    return MySQLdb.connect(host=DB_HOST,user=USER,passwd=PASSWD,db=DATABASE,charset="utf8")    # Database connection configure@app.before_requestdef before_request():    g.db = connect_db()@app.teardown_requestdef teardown_request(exception):    g.db.close()# define URL route@app.route('/')def index():    return redirect(url_for('login'))@app.route('/login', methods=['GET', 'POST'])def login():    # query user_name    c1 = g.db.cursor()    sql_u = 'select username from user'    c1.execute(sql_u)    # query password    c2 = g.db.cursor()    sql_p = 'select password from user'    c2.execute(sql_p)    error = None    if request.method == 'POST':        if request.form['username'] not in ["%s" % row[0] for row in c1.fetchall()]:            flash(unicode(str("用户名无效"),"UTF8"))         elif request.form['password'] not in ["%s" % row[0] for row in c2.fetchall()]:            flash(unicode(str("密码无效"),"UTF8"))        else:            session['logged_in'] = True            flash(request.form['username'])            return redirect(url_for('show_guest'))    return render_template('login.html', error=error)    @app.route('/logout')def logout():    session.pop('logged_in', None)    flash(unicode(str("未登录"),"UTF8"))    return redirect(url_for('login'))@app.route('/coffee_event', methods=['GET', 'POST'])def coffee_event():    error = None    if request.method == 'POST':        c = g.db.cursor()        if request.form['name'].strip() == '':            flash(unicode(str("额,没看到姓名"),"UTF8"))         elif request.form['phone'].strip() == '':            flash(unicode(str("额,没看到手机号"),"UTF8"))        elif request.form['school'].strip() == '':            flash(unicode(str("额,没看到学校"),"UTF8"))        elif request.form['grade'].strip() == '':            flash(unicode(str("额,没看到年级"),"UTF8"))        else:            c.execute('insert into guest(name,phone,school,grade) values (%s,%s,%s,%s)', (request.form['name'],request.form['phone'],request.form['school'],request.form['grade']))            g.db.commit()            return redirect(url_for('success'))    return render_template('coffee_event.html', error=error)@app.route('/success')def success():    return render_template('success.html')@app.route('/coffee_wechat', methods=['GET', 'POST'])def coffee_wechat():    error = None    if request.method == 'POST':        c = g.db.cursor()        if request.form['name'].strip() == '':            flash(unicode(str("额,没看到姓名"),"UTF8"))         elif request.form['phone'].strip() == '':            flash(unicode(str("额,没看到手机号"),"UTF8"))        elif request.form['school'].strip() == '':            flash(unicode(str("额,没看到学校"),"UTF8"))        elif request.form['grade'].strip() == '':            flash(unicode(str("额,没看到年级"),"UTF8"))        else:            c.execute('insert into guest(name,phone,school,grade,inviter,source) values (%s,%s,%s,%s,%s,%s)', (request.form['name'],request.form['phone'],request.form['school'],request.form['grade'],request.form['inviter'],request.form['source']))            g.db.commit()            content = "%s申请参与咖啡活动,手机号是%s,来自%s%s年级.加油!"% (request.form['name'],request.form['phone'],request.form['school'],request.form['grade'])            notification = urlencode([('content',content)])            notification_url = 'http://api.zhiyoujy.com/msg/sendnotice?accessToken=13235de7cb2a7a581066439ed82d4ed3&%s' % notification            urllib.urlopen(notification_url).read()            return redirect(url_for('success'))    else:        source = request.args.get('from_user', '')        temp_guest = dict(source=source)        return render_template('coffee_wechat.html', temp_guest=temp_guest, error=error)@app.route('/show_guest')def show_guest():    if session.get('logged_in'):        c = g.db.cursor()        sql = 'select id, name, phone, school, grade, subject, channel, follow_up, status, reservation_time, note, inviter from guest order by id'        n = c.execute(sql)        guests = [dict(id=row[0],name=row[1],phone=row[2], school=row[3], grade=row[4], subject=row[5], channel=row[6], follow_up=row[7], status=row[8], reservation_time=row[9], note=row[10], inviter=row[11]) for row in c.fetchall()]        return render_template('show_guest.html', guests=guests)    else:        flash(unicode(str("请登录后继续"),"UTF8"))        return redirect(url_for('login'))@app.route('/show_guest_detail/<int:id>', methods=['GET','POST'])def show_guest_detail(id):    if session.get('logged_in'):        c = g.db.cursor()        sql = 'select id, name, phone, school, grade, subject, channel, follow_up, status, reservation_time, note, inviter, source from guest where id = %d' % id        n = c.execute(sql)        row = c.fetchone()        guest = dict(id=row[0],name=row[1],phone=row[2], school=row[3], grade=row[4], subject=row[5], channel=row[6], follow_up=row[7], status=row[8], reservation_time=row[9], note=row[10], inviter=row[11], source=row[12])        return render_template('show_guest_detail.html', guest=guest)    else:        flash(unicode(str("请登录后继续"),"UTF8"))        return redirect(url_for('login'))@app.route('/register', methods=['GET','POST'])def register():    if request.method == 'GET':        return render_template("register.html")    if request.method == 'POST':        u = request.form['username']        p,s = encrypt_password(request.form['password'])        g.db.cursor.execute('INSERT INTO user (name,password,salt) VALUES (%s,%s,%s)',(u,p,s))        g.db.commit()    return redirect(url_for('signin'))@app.route('/edit/<int:id>', methods=['GET','POST'])def edit(id):    if session.get('logged_in'):        if request.method == 'POST':            c = g.db.cursor()            sql = 'update guest set subject="%s",channel="%s",follow_up="%s",status="%s",reservation_time="%s",note="%s" where id=%d;' % (request.form['subject'],request.form['channel'],request.form['follow_up'],request.form['status'],request.form['reservation_time'],request.form['note'],id)            c.execute(sql)            g.db.commit()            return redirect(url_for('show_guest'))        else:            c = g.db.cursor()            sql = 'select id, name, phone, school, grade, subject, channel, follow_up, status, reservation_time, note from guest where id = %d' % id            n = c.execute(sql)            row = c.fetchone()            guest = dict(id=row[0],name=row[1],phone=row[2], school=row[3], grade=row[4], subject=row[5], channel=row[6], follow_up=row[7], status=row[8], reservation_time=row[9], note=row[10])            return render_template('edit.html', guest=guest)    else:        flash(unicode(str("请登录后继续"),"UTF8"))        return redirect(url_for('login'))@app.route('/delete', methods=['GET','POST'])def delete():    if session.get('logged_in'):        if request.method == 'POST':            c = g.db.cursor()            sql = 'delete from guest where id=%d;' % int(request.form['id'])            c.execute(sql)            g.db.commit()            return redirect(url_for('show_guest'))    else:        flash(unicode(str("请登录后继续"),"UTF8"))        return redirect(url_for('login'))